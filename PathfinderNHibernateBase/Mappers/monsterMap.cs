using System; 
using System.Collections.Generic; 
using System.Text; 
using FluentNHibernate.Mapping;
using PathfinderDomains;

namespace PathfinderNHibernateBase
{   
	public class monsterMap : ClassMap<monster>
	{        
        public monsterMap() {
			Table("monster");
			LazyLoad();
			Id(x => x.id).GeneratedBy.Identity().Column("id");
			Map(x => x.name).Column("Name").Length(70);
			Map(x => x.CR).Column("CR").Length(50);
			Map(x => x.XP).Column("XP").Length(50);
			Map(x => x.Race).Column("Race").Length(50);
			Map(x => x.Class).Column("Class").Length(90);
			Map(x => x.MonsterSource).Column("MonsterSource").Length(180);
			Map(x => x.Alignment).Column("Alignment").Length(50);
			Map(x => x.Size).Column("Size").Length(50);
			Map(x => x.Type).Column("Type").Length(50);
			Map(x => x.SubType).Column("SubType").Length(60);
			Map(x => x.Init).Column("Init").Length(50);
			Map(x => x.Senses).Column("Senses").Length(165);
			Map(x => x.Aura).Column("Aura").Length(125);
			Map(x => x.AC).Column("AC").Length(100);
			Map(x => x.AC_Mods).Column("AC_Mods").Length(120);
			Map(x => x.HP).Column("HP").Length(50);
			Map(x => x.HD).Column("HD").Length(70);
			Map(x => x.HP_Mods).Column("HP_Mods").Length(70);
			Map(x => x.Saves).Column("Saves").Length(220);
			Map(x => x.Fort).Column("Fort").Length(50);
			Map(x => x.Ref).Column("Ref").Length(50);
			Map(x => x.Will).Column("Will").Length(90);
			Map(x => x.Save_Mods).Column("Save_Mods").Length(200);
			Map(x => x.DefensiveAbilities).Column("DefensiveAbilities").Length(170);
			Map(x => x.DR).Column("DR").Length(70);
			Map(x => x.Immune).Column("Immune").Length(240);
			Map(x => x.Resist).Column("Resist").Length(100);
			Map(x => x.SR).Column("SR").Length(60);
			Map(x => x.Weaknesses).Column("Weaknesses").Length(75);
			Map(x => x.Speed).Column("Speed").Length(75);
			Map(x => x.Speed_Mod).Column("Speed_Mod").Length(50);
			Map(x => x.Melee).Column("Melee").Length(340);
			Map(x => x.Ranged).Column("Ranged").Length(205);
			Map(x => x.Space).Column("Space").Length(50);
			Map(x => x.Reach).Column("Reach").Length(60);
			Map(x => x.SpecialAttacks).Column("SpecialAttacks").Length(3000);
			Map(x => x.SpellLikeAbilities).Column("SpellLikeAbilities").Length(1300);
			Map(x => x.SpellsKnown).Column("SpellsKnown").Length(1420);
			Map(x => x.SpellsPrepared).Column("SpellsPrepared").Length(2600);
			Map(x => x.SpellDomains).Column("SpellDomains").Length(70);
            Map(x => x.AbilityScores).Column("AbilityScores").Length(85);
            Map(x => x.AbilityScore_Mods).Column("AbilityScore_Mods").Length(50);
			Map(x => x.BaseAtk).Column("BaseAtk").Length(50);
			Map(x => x.CMB).Column("CMB").Length(65);
			Map(x => x.CMD).Column("CMD").Length(70);
			Map(x => x.Feats).Column("Feats").Length(550);
			Map(x => x.Skills).Column("Skills").Length(550);
			Map(x => x.RacialMods).Column("RacialMods").Length(260);
			Map(x => x.Languages).Column("Languages").Length(350);
			Map(x => x.SQ).Column("SQ").Length(420);
			Map(x => x.Environment).Column("Environment").Length(110);
			Map(x => x.Organization).Column("Organization").Length(475);
			Map(x => x.Treasure).Column("Treasure").Length(600);
			Map(x => x.Description_Visual).Column("Description_Visual").Length(1000);
			Map(x => x.Group).Column("[Group]").Length(50);
			Map(x => x.Source).Column("Source").Length(65);
			Map(x => x.IsTemplate).Column("IsTemplate");
            Map(x => x.SpecialAbilities).Column("SpecialAbilities").CustomSqlType("varchar(max)").Length(int.MaxValue);
            Map(x => x.Description).Column("Description").CustomSqlType("varchar(max)").Length(int.MaxValue);
            Map(x => x.FullText).Column("FullText").CustomSqlType("varchar(max)").Length(int.MaxValue);
			Map(x => x.Gender).Column("Gender").Length(50);
			Map(x => x.Bloodline).Column("Bloodline").Length(50);
			Map(x => x.ProhibitedSchools).Column("ProhibitedSchools").Length(50);
			Map(x => x.BeforeCombat).Column("BeforeCombat").Length(800);
			Map(x => x.DuringCombat).Column("DuringCombat").Length(1900);
			Map(x => x.Morale).Column("Morale").Length(3100);
			Map(x => x.Gear).Column("Gear").Length(1000);
			Map(x => x.OtherGear).Column("OtherGear").Length(810);
			Map(x => x.Vulnerability).Column("Vulnerability").Length(50);
			Map(x => x.Note).Column("Note").Length(200);
			Map(x => x.CharacterFlag).Column("CharacterFlag").Not.Nullable();
			Map(x => x.CompanionFlag).Column("CompanionFlag").Not.Nullable();
			Map(x => x.Fly).Column("Fly").Not.Nullable();
			Map(x => x.Climb).Column("Climb").Not.Nullable();
			Map(x => x.Burrow).Column("Burrow").Not.Nullable();
			Map(x => x.Swim).Column("Swim").Not.Nullable();
			Map(x => x.Land).Column("Land").Not.Nullable();
			Map(x => x.LinkText).Column("LinkText").Length(200);
			Map(x => x.TemplatesApplied).Column("TemplatesApplied").Length(50);
			Map(x => x.OffenseNote).Column("OffenseNote").Length(110);
			Map(x => x.BaseStatistics).Column("BaseStatistics").Length(700);
			Map(x => x.ExtractsPrepared).Column("ExtractsPrepared").Length(800);
			Map(x => x.AgeCategory).Column("AgeCategory").Length(20);
			Map(x => x.DontUseRacialHD).Column("DontUseRacialHD").Not.Nullable();
			Map(x => x.VariantParent).Column("VariantParent").Length(50);
			Map(x => x.Mystery).Column("Mystery").Length(65);
			Map(x => x.ClassArchetypes).Column("ClassArchetypes").Length(50);
			Map(x => x.Patron).Column("Patron").Length(50);
			Map(x => x.CompanionFamiliarLink).Column("CompanionFamiliarLink");
			Map(x => x.FocusedSchool).Column("FocusedSchool").Length(50);
			Map(x => x.Traits).Column("Traits").Length(100);
			Map(x => x.AlternateNameForm).Column("AlternateNameForm").Length(50);
			Map(x => x.UniqueMonster).Column("UniqueMonster").Not.Nullable();
			Map(x => x.ThassilonianSpecialization).Column("ThassilonianSpecialization").Length(50);
			Map(x => x.Variant).Column("Variant").Not.Nullable();
            Map(x => x.AdditionalExtractsKnown).Column("AdditionalExtractsKnown").Not.Nullable().Length(75);
            Map(x => x.MR).Column("MR").Not.Nullable().Precision(10);
            Map(x => x.Mythic).Column("Mythic").Not.Nullable();
            Map(x => x.MT).Column("MT").Not.Nullable().Precision(10);
            Map(x => x.Spirit).Column("Spirit").Not.Nullable().Length(50);
            Map(x => x.PsychicMagic).Column("PsychicMagic").Not.Nullable().Length(1000);
            Map(x => x.KineticistWildTalents).Column("KineticistWildTalents").Not.Nullable().Length(1000);
            Map(x => x.Implements).Column("Implements").Not.Nullable().Length(1000);
            Map(x => x.PsychicDiscipline).Column("PsychicDiscipline").Not.Nullable().Length(50);
            Map(x => x.IsBestiary).Column("IsBestiary");
        }
    }
}
